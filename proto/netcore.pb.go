// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netcore.proto

package netcore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeType int32

const (
	NodeType_DB     NodeType = 0
	NodeType_CLIENT NodeType = 10
)

var NodeType_name = map[int32]string{
	0:  "DB",
	10: "CLIENT",
}
var NodeType_value = map[string]int32{
	"DB":     0,
	"CLIENT": 10,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{0}
}

type ChannelType int32

const (
	ChannelType_NODEINFO ChannelType = 0
)

var ChannelType_name = map[int32]string{
	0: "NODEINFO",
}
var ChannelType_value = map[string]int32{
	"NODEINFO": 0,
}

func (x ChannelType) String() string {
	return proto.EnumName(ChannelType_name, int32(x))
}
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{1}
}

type CtrlJoin struct {
	Nodetype             NodeType `protobuf:"varint,1,opt,name=nodetype,proto3,enum=netcore.NodeType" json:"nodetype,omitempty"`
	Servaddr             string   `protobuf:"bytes,2,opt,name=servaddr,proto3" json:"servaddr,omitempty"`
	Nameid               string   `protobuf:"bytes,3,opt,name=nameid,proto3" json:"nameid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CtrlJoin) Reset()         { *m = CtrlJoin{} }
func (m *CtrlJoin) String() string { return proto.CompactTextString(m) }
func (*CtrlJoin) ProtoMessage()    {}
func (*CtrlJoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{0}
}
func (m *CtrlJoin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CtrlJoin.Unmarshal(m, b)
}
func (m *CtrlJoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CtrlJoin.Marshal(b, m, deterministic)
}
func (dst *CtrlJoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CtrlJoin.Merge(dst, src)
}
func (m *CtrlJoin) XXX_Size() int {
	return xxx_messageInfo_CtrlJoin.Size(m)
}
func (m *CtrlJoin) XXX_DiscardUnknown() {
	xxx_messageInfo_CtrlJoin.DiscardUnknown(m)
}

var xxx_messageInfo_CtrlJoin proto.InternalMessageInfo

func (m *CtrlJoin) GetNodetype() NodeType {
	if m != nil {
		return m.Nodetype
	}
	return NodeType_DB
}

func (m *CtrlJoin) GetServaddr() string {
	if m != nil {
		return m.Servaddr
	}
	return ""
}

func (m *CtrlJoin) GetNameid() string {
	if m != nil {
		return m.Nameid
	}
	return ""
}

type ReplyCtrl struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyCtrl) Reset()         { *m = ReplyCtrl{} }
func (m *ReplyCtrl) String() string { return proto.CompactTextString(m) }
func (*ReplyCtrl) ProtoMessage()    {}
func (*ReplyCtrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{1}
}
func (m *ReplyCtrl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyCtrl.Unmarshal(m, b)
}
func (m *ReplyCtrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyCtrl.Marshal(b, m, deterministic)
}
func (dst *ReplyCtrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCtrl.Merge(dst, src)
}
func (m *ReplyCtrl) XXX_Size() int {
	return xxx_messageInfo_ReplyCtrl.Size(m)
}
func (m *ReplyCtrl) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCtrl.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCtrl proto.InternalMessageInfo

func (m *ReplyCtrl) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type Subscribe struct {
	Type                 ChannelType `protobuf:"varint,1,opt,name=type,proto3,enum=netcore.ChannelType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{2}
}
func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (dst *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(dst, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NODEINFO
}

type NodeInfo struct {
	Nodetype             NodeType `protobuf:"varint,1,opt,name=nodetype,proto3,enum=netcore.NodeType" json:"nodetype,omitempty"`
	Servaddr             string   `protobuf:"bytes,2,opt,name=servaddr,proto3" json:"servaddr,omitempty"`
	Nameid               string   `protobuf:"bytes,3,opt,name=nameid,proto3" json:"nameid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{3}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetNodetype() NodeType {
	if m != nil {
		return m.Nodetype
	}
	return NodeType_DB
}

func (m *NodeInfo) GetServaddr() string {
	if m != nil {
		return m.Servaddr
	}
	return ""
}

func (m *NodeInfo) GetNameid() string {
	if m != nil {
		return m.Nameid
	}
	return ""
}

type ChannelInfo struct {
	Type                 ChannelType `protobuf:"varint,1,opt,name=type,proto3,enum=netcore.ChannelType" json:"type,omitempty"`
	Nodeinfo             *NodeInfo   `protobuf:"bytes,2,opt,name=nodeinfo,proto3" json:"nodeinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ChannelInfo) Reset()         { *m = ChannelInfo{} }
func (m *ChannelInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelInfo) ProtoMessage()    {}
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_netcore_8d6c1985878675b4, []int{4}
}
func (m *ChannelInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInfo.Unmarshal(m, b)
}
func (m *ChannelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInfo.Marshal(b, m, deterministic)
}
func (dst *ChannelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfo.Merge(dst, src)
}
func (m *ChannelInfo) XXX_Size() int {
	return xxx_messageInfo_ChannelInfo.Size(m)
}
func (m *ChannelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfo proto.InternalMessageInfo

func (m *ChannelInfo) GetType() ChannelType {
	if m != nil {
		return m.Type
	}
	return ChannelType_NODEINFO
}

func (m *ChannelInfo) GetNodeinfo() *NodeInfo {
	if m != nil {
		return m.Nodeinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CtrlJoin)(nil), "netcore.CtrlJoin")
	proto.RegisterType((*ReplyCtrl)(nil), "netcore.ReplyCtrl")
	proto.RegisterType((*Subscribe)(nil), "netcore.Subscribe")
	proto.RegisterType((*NodeInfo)(nil), "netcore.NodeInfo")
	proto.RegisterType((*ChannelInfo)(nil), "netcore.ChannelInfo")
	proto.RegisterEnum("netcore.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("netcore.ChannelType", ChannelType_name, ChannelType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetCoreServClient is the client API for NetCoreServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetCoreServClient interface {
	Join(ctx context.Context, in *CtrlJoin, opts ...grpc.CallOption) (*ReplyCtrl, error)
	Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (NetCoreServ_SubscribeClient, error)
}

type netCoreServClient struct {
	cc *grpc.ClientConn
}

func NewNetCoreServClient(cc *grpc.ClientConn) NetCoreServClient {
	return &netCoreServClient{cc}
}

func (c *netCoreServClient) Join(ctx context.Context, in *CtrlJoin, opts ...grpc.CallOption) (*ReplyCtrl, error) {
	out := new(ReplyCtrl)
	err := c.cc.Invoke(ctx, "/netcore.NetCoreServ/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netCoreServClient) Subscribe(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (NetCoreServ_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetCoreServ_serviceDesc.Streams[0], "/netcore.NetCoreServ/subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &netCoreServSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetCoreServ_SubscribeClient interface {
	Recv() (*ChannelInfo, error)
	grpc.ClientStream
}

type netCoreServSubscribeClient struct {
	grpc.ClientStream
}

func (x *netCoreServSubscribeClient) Recv() (*ChannelInfo, error) {
	m := new(ChannelInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetCoreServServer is the server API for NetCoreServ service.
type NetCoreServServer interface {
	Join(context.Context, *CtrlJoin) (*ReplyCtrl, error)
	Subscribe(*Subscribe, NetCoreServ_SubscribeServer) error
}

func RegisterNetCoreServServer(s *grpc.Server, srv NetCoreServServer) {
	s.RegisterService(&_NetCoreServ_serviceDesc, srv)
}

func _NetCoreServ_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CtrlJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetCoreServServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netcore.NetCoreServ/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetCoreServServer).Join(ctx, req.(*CtrlJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetCoreServ_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetCoreServServer).Subscribe(m, &netCoreServSubscribeServer{stream})
}

type NetCoreServ_SubscribeServer interface {
	Send(*ChannelInfo) error
	grpc.ServerStream
}

type netCoreServSubscribeServer struct {
	grpc.ServerStream
}

func (x *netCoreServSubscribeServer) Send(m *ChannelInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _NetCoreServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netcore.NetCoreServ",
	HandlerType: (*NetCoreServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "join",
			Handler:    _NetCoreServ_Join_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "subscribe",
			Handler:       _NetCoreServ_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "netcore.proto",
}

func init() { proto.RegisterFile("netcore.proto", fileDescriptor_netcore_8d6c1985878675b4) }

var fileDescriptor_netcore_8d6c1985878675b4 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xd1, 0x4b, 0xbb, 0x50,
	0x1c, 0xc5, 0x75, 0xbf, 0xfd, 0x4c, 0xbf, 0xab, 0x58, 0x97, 0x88, 0x61, 0x10, 0xc3, 0x5e, 0x64,
	0xd0, 0x8a, 0x45, 0x0f, 0xbd, 0xe6, 0x16, 0x18, 0xe1, 0xc0, 0xed, 0x1f, 0xd0, 0xf9, 0x95, 0x0c,
	0x77, 0xaf, 0x5c, 0xef, 0x06, 0xfe, 0xf7, 0x71, 0x6f, 0x7a, 0x17, 0xf5, 0xd2, 0x53, 0x8f, 0x47,
	0x8f, 0xdf, 0xf3, 0x39, 0x1c, 0xe1, 0x84, 0xa2, 0xd8, 0x30, 0x8e, 0xd3, 0x8a, 0x33, 0xc1, 0xc8,
	0x51, 0x2b, 0xbd, 0x2d, 0xd8, 0x81, 0xe0, 0xe5, 0x0b, 0x2b, 0x28, 0xb9, 0x01, 0x9b, 0xb2, 0x0c,
	0x45, 0x53, 0xe1, 0xc8, 0x1c, 0x9b, 0xfe, 0xe9, 0xec, 0x6c, 0xda, 0x7d, 0x16, 0xb1, 0x0c, 0xd7,
	0x4d, 0x85, 0xb1, 0xb6, 0x10, 0x17, 0xec, 0x1a, 0xf9, 0x3e, 0xc9, 0x32, 0x3e, 0xea, 0x8d, 0x4d,
	0xdf, 0x89, 0xb5, 0x26, 0x17, 0x60, 0xd1, 0x64, 0x8b, 0x45, 0x36, 0xfa, 0xa7, 0xde, 0xb4, 0xca,
	0xbb, 0x06, 0x27, 0xc6, 0xaa, 0x6c, 0x64, 0xa6, 0x34, 0x71, 0xac, 0x77, 0xa5, 0x50, 0x69, 0xff,
	0xe3, 0x56, 0x79, 0x0f, 0xe0, 0xac, 0x76, 0x69, 0xbd, 0xe1, 0x45, 0x8a, 0xc4, 0x87, 0xfe, 0x17,
	0xa0, 0x73, 0x0d, 0x14, 0xbc, 0x25, 0x94, 0x62, 0xa9, 0x98, 0x94, 0x43, 0x56, 0x91, 0x94, 0x21,
	0xcd, 0xd9, 0x5f, 0x54, 0xc9, 0x61, 0xd0, 0x32, 0xa8, 0xc4, 0x5f, 0x73, 0x76, 0x6c, 0x05, 0xcd,
	0x99, 0x0a, 0x1b, 0x7c, 0x63, 0x93, 0xe7, 0x62, 0x6d, 0x99, 0x5c, 0x7d, 0xd6, 0x92, 0x07, 0x88,
	0x05, 0xbd, 0xf9, 0xd3, 0xd0, 0x20, 0x00, 0x56, 0xf0, 0x1a, 0x2e, 0xa2, 0xf5, 0x10, 0x26, 0x97,
	0x9a, 0x43, 0x59, 0x8e, 0xc1, 0x8e, 0x96, 0xf3, 0x45, 0x18, 0x3d, 0x2f, 0x87, 0xc6, 0xac, 0x81,
	0x41, 0x84, 0x22, 0x60, 0x1c, 0x57, 0xc8, 0xf7, 0xe4, 0x16, 0xfa, 0xef, 0x72, 0xe9, 0x43, 0x60,
	0x37, 0xbe, 0x4b, 0xf4, 0x23, 0x3d, 0x90, 0x67, 0x90, 0x47, 0x70, 0x6a, 0x3d, 0xc5, 0xc1, 0xa2,
	0xe7, 0x71, 0x7f, 0x14, 0x95, 0xf4, 0x9e, 0x71, 0x67, 0xa6, 0x96, 0xfa, 0xd3, 0xee, 0x3f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x20, 0x63, 0xde, 0x7c, 0x7a, 0x02, 0x00, 0x00,
}
